{"remainingRequest":"C:\\Users\\dell\\algorithm-design\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\dell\\algorithm-design\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\dell\\algorithm-design\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\dell\\algorithm-design\\src\\components\\introduction.vue?vue&type=template&id=3d5a0b2a&scoped=true&","dependencies":[{"path":"C:\\Users\\dell\\algorithm-design\\src\\components\\introduction.vue","mtime":1622879821808},{"path":"C:\\Users\\dell\\algorithm-design\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dell\\algorithm-design\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\dell\\algorithm-design\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dell\\algorithm-design\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}